{"remainingRequest":"F:\\mp-project\\taigongthtm-project-front\\node_modules\\babel-loader\\lib\\index.js!F:\\mp-project\\taigongthtm-project-front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\mp-project\\taigongthtm-project-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\mp-project\\taigongthtm-project-front\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\mp-project\\taigongthtm-project-front\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue","mtime":1648453569329},{"path":"F:\\mp-project\\taigongthtm-project-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648453574266},{"path":"F:\\mp-project\\taigongthtm-project-front\\node_modules\\babel-loader\\lib\\index.js","mtime":1648453572806},{"path":"F:\\mp-project\\taigongthtm-project-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648453574266},{"path":"F:\\mp-project\\taigongthtm-project-front\\node_modules\\vue-loader\\lib\\index.js","mtime":1648453593268}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"dv-water-pond-level\">\r\n    <svg v-if=\"renderer\">\r\n      <defs>\r\n        <linearGradient :id=\"gradientId\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n          <stop v-for=\"lc in svgBorderGradient\" :key=\"lc[0]\"\r\n            :offset=\"lc[0]\"\r\n            :stop-color=\"lc[1]\" />\r\n        </linearGradient>\r\n      </defs>\r\n\r\n      <text\r\n        v-if=\"renderer\"\r\n        :stroke=\"`url(#${gradientId})`\"\r\n        :fill=\"`url(#${gradientId})`\"\r\n        :x=\"renderer.area[0] / 2 + 8\"\r\n        :y=\"renderer.area[1] / 2 + 8\"\r\n      >\r\n        {{ details }}\r\n      </text>\r\n\r\n      <ellipse v-if=\"!shape || shape === 'round'\"\r\n        :cx=\"renderer.area[0] / 2 + 8\"\r\n        :cy=\"renderer.area[1] / 2 + 8\"\r\n        :rx=\"renderer.area[0] / 2 + 5\"\r\n        :ry=\"renderer.area[1] / 2 + 5\"\r\n        :stroke=\"`url(#${gradientId})`\" />\r\n\r\n      <rect v-else\r\n        x=\"2\" y=\"2\"\r\n        :rx=\"shape === 'roundRect' ? 10 : 0\"\r\n        :ry=\"shape === 'roundRect' ? 10 : 0\"\r\n        :width=\"renderer.area[0] + 12\"\r\n        :height=\"renderer.area[1] + 12\"\r\n        :stroke=\"`url(#${gradientId})`\" />\r\n    </svg>\r\n\r\n    <canvas ref=\"water-pond-level\" :style=\"`border-radius: ${radius};`\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { uuid } from '../../../util/index'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nimport CRender from '@jiaminghi/c-render'\r\n\r\nexport default {\r\n  name: 'DvWaterLevelPond',\r\n  props: {\r\n    config: Object,\r\n    default: () => ({})\r\n  },\r\n  data () {\r\n    const id = uuid()\r\n    return {\r\n      gradientId: `water-level-pond-${id}`,\r\n\r\n      defaultConfig: {\r\n        /**\r\n         * @description Data\r\n         * @type {Array<Number>}\r\n         * @default data = []\r\n         * @example data = [60, 40]\r\n         */\r\n        data: [],\r\n        /**\r\n         * @description Shape of wanter level pond\r\n         * @type {String}\r\n         * @default shape = 'rect'\r\n         * @example shape = 'rect' | 'roundRect' | 'round'\r\n         */\r\n        shape: 'rect',\r\n        /**\r\n         * @description Water wave number\r\n         * @type {Number}\r\n         * @default waveNum = 3\r\n         */\r\n        waveNum: 3,\r\n        /**\r\n         * @description Water wave height (px)\r\n         * @type {Number}\r\n         * @default waveHeight = 40\r\n         */\r\n        waveHeight: 40,\r\n        /**\r\n         * @description Wave opacity\r\n         * @type {Number}\r\n         * @default waveOpacity = 0.4\r\n         */\r\n        waveOpacity: 0.4,\r\n        /**\r\n         * @description Colors (hex|rgb|rgba|color keywords)\r\n         * @type {Array<String>}\r\n         * @default colors = ['#00BAFF', '#3DE7C9']\r\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\r\n         */\r\n        colors: ['#3DE7C9', '#00BAFF'],\r\n        /**\r\n         * @description Formatter\r\n         * @type {String}\r\n         * @default formatter = '{value}%'\r\n         */\r\n        formatter: '{value}%'\r\n      },\r\n\r\n      mergedConfig: {},\r\n\r\n      renderer: null,\r\n\r\n      svgBorderGradient: [],\r\n\r\n      details: '',\r\n\r\n      waves: [],\r\n\r\n      animation: false\r\n    }\r\n  },\r\n  computed: {\r\n    radius () {\r\n      const { shape } = this.mergedConfig\r\n\r\n      if (shape === 'round') return '50%'\r\n\r\n      if (shape === 'rect') return '0'\r\n\r\n      if (shape === 'roundRect') return '10px'\r\n\r\n      return '0'\r\n    },\r\n    shape () {\r\n      const { shape } = this.mergedConfig\r\n\r\n      if (!shape) return 'rect'\r\n\r\n      return shape\r\n    }\r\n  },\r\n  watch: {\r\n    config () {\r\n      const { calcData, renderer } = this\r\n\r\n      renderer.delAllGraph()\r\n\r\n      this.waves = []\r\n\r\n      setTimeout(calcData, 0)\r\n    }\r\n  },\r\n  methods: {\r\n    init () {\r\n      const { initRender, config, calcData } = this\r\n\r\n      initRender()\r\n\r\n      if (!config) return\r\n\r\n      calcData()\r\n    },\r\n    initRender () {\r\n      const { $refs } = this\r\n\r\n      this.renderer = new CRender($refs['water-pond-level'])\r\n    },\r\n    calcData () {\r\n      const { mergeConfig, calcSvgBorderGradient, calcDetails } = this\r\n\r\n      mergeConfig()\r\n\r\n      calcSvgBorderGradient()\r\n\r\n      calcDetails()\r\n\r\n      const { addWave, animationWave } = this\r\n\r\n      addWave()\r\n\r\n      animationWave()\r\n    },\r\n    mergeConfig () {\r\n      const { config, defaultConfig } = this\r\n\r\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config)\r\n    },\r\n    calcSvgBorderGradient () {\r\n      const { colors } = this.mergedConfig\r\n\r\n      const colorNum = colors.length\r\n\r\n      const colorOffsetGap = 100 / (colorNum - 1)\r\n\r\n      this.svgBorderGradient = colors.map((c, i) => [colorOffsetGap * i, c])\r\n    },\r\n    calcDetails () {\r\n      const { data, formatter } = this.mergedConfig\r\n\r\n      if (!data.length) {\r\n        this.details = ''\r\n\r\n        return\r\n      }\r\n\r\n      const maxValue = Math.max(...data)\r\n\r\n      this.details = formatter.replace('{value}', maxValue)\r\n    },\r\n    addWave () {\r\n      const { renderer, getWaveShapes, getWaveStyle, drawed } = this\r\n\r\n      const shapes = getWaveShapes()\r\n      const style = getWaveStyle()\r\n\r\n      this.waves = shapes.map(shape => renderer.add({\r\n        name: 'smoothline',\r\n        animationFrame: 300,\r\n        shape,\r\n        style,\r\n        drawed\r\n      }))\r\n    },\r\n    getWaveShapes () {\r\n      const { mergedConfig, renderer, mergeOffset } = this\r\n\r\n      const { waveNum, waveHeight, data } = mergedConfig\r\n\r\n      const [w, h] = renderer.area\r\n\r\n      const pointsNum = waveNum * 4 + 4\r\n\r\n      const pointXGap = w / waveNum / 2\r\n\r\n      return data.map(v => {\r\n        let points = new Array(pointsNum).fill(0).map((foo, j) => {\r\n          const x = w - pointXGap * j\r\n\r\n          const startY = (1 - v / 100) * h\r\n\r\n          const y = j % 2 === 0 ? startY : startY - waveHeight\r\n\r\n          return [x, y]\r\n        })\r\n\r\n        points = points.map(p => mergeOffset(p, [pointXGap * 2, 0]))\r\n\r\n        return { points }\r\n      })\r\n    },\r\n    mergeOffset ([x, y], [ox, oy]) {\r\n      return [x + ox, y + oy]\r\n    },\r\n    getWaveStyle () {\r\n      const { renderer, mergedConfig } = this\r\n\r\n      const h = renderer.area[1]\r\n\r\n      return {\r\n        gradientColor: mergedConfig.colors,\r\n        gradientType: 'linear',\r\n        gradientParams: [0, 0, 0, h],\r\n        gradientWith: 'fill',\r\n        opacity: mergedConfig.waveOpacity,\r\n        translate: [0, 0]\r\n      }\r\n    },\r\n    drawed ({ shape: { points } }, { ctx, area }) {\r\n      const firstPoint = points[0]\r\n      const lastPoint = points.slice(-1)[0]\r\n\r\n      const h = area[1]\r\n\r\n      ctx.lineTo(lastPoint[0], h)\r\n      ctx.lineTo(firstPoint[0], h)\r\n\r\n      ctx.closePath()\r\n\r\n      ctx.fill()\r\n    },\r\n    async animationWave (repeat = 1) {\r\n      const { waves, renderer, animation } = this\r\n\r\n      if (animation) return\r\n\r\n      this.animation = true\r\n\r\n      const w = renderer.area[0]\r\n\r\n      waves.forEach(graph => {\r\n        graph.attr('style', { translate: [0, 0] })\r\n\r\n        graph.animation('style', {\r\n          translate: [w, 0]\r\n        }, true)\r\n      })\r\n\r\n      await renderer.launchAnimation()\r\n\r\n      this.animation = false\r\n\r\n      if (!renderer.graphs.length) return\r\n\r\n      this.animationWave(repeat + 1)\r\n    }\r\n  },\r\n  mounted () {\r\n    const { init } = this\r\n\r\n    init()\r\n  },\r\n  beforeDestroy () {\r\n    const { renderer } = this\r\n\r\n    renderer.delAllGraph()\r\n\r\n    this.waves = []\r\n  }\r\n}\r\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/waterLevelPond/src"}]}