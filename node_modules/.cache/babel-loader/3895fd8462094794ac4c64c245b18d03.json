{"remainingRequest":"F:\\mp-project\\taigongthtm-project-front\\node_modules\\thread-loader\\dist\\cjs.js!F:\\mp-project\\taigongthtm-project-front\\node_modules\\babel-loader\\lib\\index.js!F:\\mp-project\\taigongthtm-project-front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\mp-project\\taigongthtm-project-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\mp-project\\taigongthtm-project-front\\node_modules\\@jiaminghi\\data-view\\lib\\components\\capsuleChart\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\mp-project\\taigongthtm-project-front\\node_modules\\@jiaminghi\\data-view\\lib\\components\\capsuleChart\\src\\main.vue","mtime":1648453569274},{"path":"F:\\mp-project\\taigongthtm-project-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648453574266},{"path":"F:\\mp-project\\taigongthtm-project-front\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1648453592739},{"path":"F:\\mp-project\\taigongthtm-project-front\\node_modules\\babel-loader\\lib\\index.js","mtime":1648453572806},{"path":"F:\\mp-project\\taigongthtm-project-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648453574266},{"path":"F:\\mp-project\\taigongthtm-project-front\\node_modules\\vue-loader\\lib\\index.js","mtime":1648453593268}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICJGOi9tcC1wcm9qZWN0L3RhaWdvbmd0aHRtLXByb2plY3QtZnJvbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnNldC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsbC5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB7IGRlZXBNZXJnZSB9IGZyb20gJ0BqaWFtaW5naGkvY2hhcnRzL2xpYi91dGlsL2luZGV4JzsKaW1wb3J0IHsgZGVlcENsb25lIH0gZnJvbSAnQGppYW1pbmdoaS9jLXJlbmRlci9saWIvcGx1Z2luL3V0aWwnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0R2Q2Fwc3VsZUNoYXJ0JywKICBwcm9wczogewogICAgY29uZmlnOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIHt9OwogICAgICB9CiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZGVmYXVsdENvbmZpZzogewogICAgICAgIC8qKg0KICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2Fwc3VsZSBjaGFydCBkYXRhDQogICAgICAgICAqIEB0eXBlIHtBcnJheTxPYmplY3Q+fQ0KICAgICAgICAgKiBAZGVmYXVsdCBkYXRhID0gW10NCiAgICAgICAgICogQGV4YW1wbGUgZGF0YSA9IFt7IG5hbWU6ICdmb28xJywgdmFsdWU6IDEwMCB9LCB7IG5hbWU6ICdmb28yJywgdmFsdWU6IDEwMCB9XQ0KICAgICAgICAgKi8KICAgICAgICBkYXRhOiBbXSwKCiAgICAgICAgLyoqDQogICAgICAgICAqIEBkZXNjcmlwdGlvbiBDb2xvcnMgKGhleHxyZ2J8cmdiYXxjb2xvciBrZXl3b3JkcykNCiAgICAgICAgICogQHR5cGUge0FycmF5PFN0cmluZz59DQogICAgICAgICAqIEBkZWZhdWx0IGNvbG9yID0gWycjMzdhMmRhJywgJyMzMmM1ZTknLCAnIzY3ZTBlMycsICcjOWZlNmI4JywgJyNmZmRiNWMnLCAnI2ZmOWY3ZicsICcjZmI3MjkzJ10NCiAgICAgICAgICogQGV4YW1wbGUgY29sb3IgPSBbJyMwMDAnLCAncmdiKDAsIDAsIDApJywgJ3JnYmEoMCwgMCwgMCwgMSknLCAncmVkJ10NCiAgICAgICAgICovCiAgICAgICAgY29sb3JzOiBbJyMzN2EyZGEnLCAnIzMyYzVlOScsICcjNjdlMGUzJywgJyM5ZmU2YjgnLCAnI2ZmZGI1YycsICcjZmY5ZjdmJywgJyNmYjcyOTMnXSwKCiAgICAgICAgLyoqDQogICAgICAgICAqIEBkZXNjcmlwdGlvbiBDaGFydCB1bml0DQogICAgICAgICAqIEB0eXBlIHtTdHJpbmd9DQogICAgICAgICAqIEBkZWZhdWx0IHVuaXQgPSAnJw0KICAgICAgICAgKi8KICAgICAgICB1bml0OiAnJywKCiAgICAgICAgLyoqDQogICAgICAgICAqIEBkZXNjcmlwdGlvbiBTaG93IGl0ZW0gdmFsdWUNCiAgICAgICAgICogQHR5cGUge0Jvb2xlYW59DQogICAgICAgICAqIEBkZWZhdWx0IHNob3dWYWx1ZSA9IGZhbHNlDQogICAgICAgICAqLwogICAgICAgIHNob3dWYWx1ZTogZmFsc2UKICAgICAgfSwKICAgICAgbWVyZ2VkQ29uZmlnOiBudWxsLAogICAgICBjYXBzdWxlTGVuZ3RoOiBbXSwKICAgICAgY2Fwc3VsZVZhbHVlOiBbXSwKICAgICAgbGFiZWxEYXRhOiBbXSwKICAgICAgbGFiZWxEYXRhTGVuZ3RoOiBbXQogICAgfTsKICB9LAogIHdhdGNoOiB7CiAgICBjb25maWc6IGZ1bmN0aW9uIGNvbmZpZygpIHsKICAgICAgdmFyIGNhbGNEYXRhID0gdGhpcy5jYWxjRGF0YTsKICAgICAgY2FsY0RhdGEoKTsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGNhbGNEYXRhOiBmdW5jdGlvbiBjYWxjRGF0YSgpIHsKICAgICAgdmFyIG1lcmdlQ29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZywKICAgICAgICAgIGNhbGNDYXBzdWxlTGVuZ3RoQW5kTGFiZWxEYXRhID0gdGhpcy5jYWxjQ2Fwc3VsZUxlbmd0aEFuZExhYmVsRGF0YTsKICAgICAgbWVyZ2VDb25maWcoKTsKICAgICAgY2FsY0NhcHN1bGVMZW5ndGhBbmRMYWJlbERhdGEoKTsKICAgIH0sCiAgICBtZXJnZUNvbmZpZzogZnVuY3Rpb24gbWVyZ2VDb25maWcoKSB7CiAgICAgIHZhciBjb25maWcgPSB0aGlzLmNvbmZpZywKICAgICAgICAgIGRlZmF1bHRDb25maWcgPSB0aGlzLmRlZmF1bHRDb25maWc7CiAgICAgIHRoaXMubWVyZ2VkQ29uZmlnID0gZGVlcE1lcmdlKGRlZXBDbG9uZShkZWZhdWx0Q29uZmlnLCB0cnVlKSwgY29uZmlnIHx8IHt9KTsKICAgIH0sCiAgICBjYWxjQ2Fwc3VsZUxlbmd0aEFuZExhYmVsRGF0YTogZnVuY3Rpb24gY2FsY0NhcHN1bGVMZW5ndGhBbmRMYWJlbERhdGEoKSB7CiAgICAgIHZhciBkYXRhID0gdGhpcy5tZXJnZWRDb25maWcuZGF0YTsKICAgICAgaWYgKCFkYXRhLmxlbmd0aCkgcmV0dXJuOwogICAgICB2YXIgY2Fwc3VsZVZhbHVlID0gZGF0YS5tYXAoZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgICB2YXIgdmFsdWUgPSBfcmVmLnZhbHVlOwogICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgfSk7CiAgICAgIHZhciBtYXhWYWx1ZSA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIF90b0NvbnN1bWFibGVBcnJheShjYXBzdWxlVmFsdWUpKTsKICAgICAgdGhpcy5jYXBzdWxlVmFsdWUgPSBjYXBzdWxlVmFsdWU7CiAgICAgIHRoaXMuY2Fwc3VsZUxlbmd0aCA9IGNhcHN1bGVWYWx1ZS5tYXAoZnVuY3Rpb24gKHYpIHsKICAgICAgICByZXR1cm4gbWF4VmFsdWUgPyB2IC8gbWF4VmFsdWUgOiAwOwogICAgICB9KTsKICAgICAgdmFyIG9uZUZpZnRoID0gbWF4VmFsdWUgLyA1OwogICAgICB2YXIgbGFiZWxEYXRhID0gQXJyYXkuZnJvbShuZXcgU2V0KG5ldyBBcnJheSg2KS5maWxsKDApLm1hcChmdW5jdGlvbiAodiwgaSkgewogICAgICAgIHJldHVybiBNYXRoLmNlaWwoaSAqIG9uZUZpZnRoKTsKICAgICAgfSkpKTsKICAgICAgdGhpcy5sYWJlbERhdGEgPSBsYWJlbERhdGE7CiAgICAgIHRoaXMubGFiZWxEYXRhTGVuZ3RoID0gQXJyYXkuZnJvbShsYWJlbERhdGEpLm1hcChmdW5jdGlvbiAodikgewogICAgICAgIHJldHVybiBtYXhWYWx1ZSA/IHYgLyBtYXhWYWx1ZSA6IDA7CiAgICAgIH0pOwogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBjYWxjRGF0YSA9IHRoaXMuY2FsY0RhdGE7CiAgICBjYWxjRGF0YSgpOwogIH0KfTs="},{"version":3,"sources":["main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"dv-capsule-chart\">\r\n    <template v-if=\"mergedConfig\">\r\n      <div class=\"label-column\">\r\n        <div v-for=\"item in mergedConfig.data\" :key=\"item.name\">{{ item.name }}</div>\r\n        <div>&nbsp;</div>\r\n      </div>\r\n\r\n      <div class=\"capsule-container\">\r\n        <div class=\"capsule-item\" v-for=\"(capsule, index) in capsuleLength\" :key=\"index\">\r\n          <div\r\n            class=\"capsule-item-column\"\r\n            :style=\"`width: ${capsule * 100}%; background-color: ${mergedConfig.colors[index % mergedConfig.colors.length]};`\"\r\n          >\r\n            <div\r\n              v-if=\"mergedConfig.showValue\"\r\n              class=\"capsule-item-value\"\r\n            >{{ capsuleValue[index] }}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"unit-label\">\r\n          <div\r\n            v-for=\"(label, index) in labelData\"\r\n            :key=\"label + index\"\r\n          >{{ label }}</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"unit-text\" v-if=\"mergedConfig.unit\">{{ mergedConfig.unit }}</div>\r\n    </template>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvCapsuleChart',\r\n  props: {\r\n    config: {\r\n      type: Object,\r\n      default: () => ({})\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      defaultConfig: {\r\n        /**\r\n         * @description Capsule chart data\r\n         * @type {Array<Object>}\r\n         * @default data = []\r\n         * @example data = [{ name: 'foo1', value: 100 }, { name: 'foo2', value: 100 }]\r\n         */\r\n        data: [],\r\n        /**\r\n         * @description Colors (hex|rgb|rgba|color keywords)\r\n         * @type {Array<String>}\r\n         * @default color = ['#37a2da', '#32c5e9', '#67e0e3', '#9fe6b8', '#ffdb5c', '#ff9f7f', '#fb7293']\r\n         * @example color = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\r\n         */\r\n        colors: [\r\n          '#37a2da',\r\n          '#32c5e9',\r\n          '#67e0e3',\r\n          '#9fe6b8',\r\n          '#ffdb5c',\r\n          '#ff9f7f',\r\n          '#fb7293'\r\n        ],\r\n        /**\r\n         * @description Chart unit\r\n         * @type {String}\r\n         * @default unit = ''\r\n         */\r\n        unit: '',\r\n        /**\r\n         * @description Show item value\r\n         * @type {Boolean}\r\n         * @default showValue = false\r\n         */\r\n        showValue: false\r\n      },\r\n\r\n      mergedConfig: null,\r\n\r\n      capsuleLength: [],\r\n      capsuleValue: [],\r\n      labelData: [],\r\n      labelDataLength: []\r\n    }\r\n  },\r\n  watch: {\r\n    config() {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    }\r\n  },\r\n  methods: {\r\n    calcData() {\r\n      const { mergeConfig, calcCapsuleLengthAndLabelData } = this\r\n\r\n      mergeConfig()\r\n\r\n      calcCapsuleLengthAndLabelData()\r\n    },\r\n    mergeConfig() {\r\n      let { config, defaultConfig } = this\r\n\r\n      this.mergedConfig = deepMerge(\r\n        deepClone(defaultConfig, true),\r\n        config || {}\r\n      )\r\n    },\r\n    calcCapsuleLengthAndLabelData() {\r\n      const { data } = this.mergedConfig\r\n\r\n      if (!data.length) return\r\n\r\n      const capsuleValue = data.map(({ value }) => value)\r\n\r\n      const maxValue = Math.max(...capsuleValue)\r\n\r\n      this.capsuleValue = capsuleValue\r\n\r\n      this.capsuleLength = capsuleValue.map(v => (maxValue ? v / maxValue : 0))\r\n\r\n      const oneFifth = maxValue / 5\r\n\r\n      const labelData = Array.from(\r\n        new Set(new Array(6).fill(0).map((v, i) => Math.ceil(i * oneFifth)))\r\n      )\r\n\r\n      this.labelData = labelData\r\n\r\n      this.labelDataLength = Array.from(labelData).map(v =>\r\n        maxValue ? v / maxValue : 0\r\n      )\r\n    }\r\n  },\r\n  mounted() {\r\n    const { calcData } = this\r\n\r\n    calcData()\r\n  }\r\n}\r\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/capsuleChart/src"}]}